<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Log4j的配置方法</title>
    <url>/2020/01/27/og4j%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="在Spring项目做单元测试时控制台报log4j配置错误"><a href="#在Spring项目做单元测试时控制台报log4j配置错误" class="headerlink" title="在Spring项目做单元测试时控制台报log4j配置错误"></a>在Spring项目做单元测试时控制台报log4j配置错误</h2><p>我在项目中已经配置了<code>log4j.properties</code>文件，但在做单元测试时控制台还是报错。可见其根本没卵用！<code>log4j.properties</code>文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #Global logging configuration</span><br><span class="line">#log4j.rootLogger&#x3D;ERROR, stdout</span><br><span class="line"># MyBatis logging configuration...</span><br><span class="line">log4j.rootLogger&#x3D;DEBUG</span><br><span class="line"># log4j.logger.org.mybatis.example.BlogMapper&#x3D;TRACE</span><br><span class="line"># Console output...</span><br><span class="line"># log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line"># log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line"># log4j.appender.stdout.layout.ConversionPattern&#x3D;%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>
<p>报错内容：ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console.”<br>原因：没有正确的配置log4j！报错内容也说得也很明白了</p>
<h2 id="log4j的正确配置方法"><a href="#log4j的正确配置方法" class="headerlink" title="log4j的正确配置方法"></a>log4j的正确配置方法</h2><p>查资料发现，log4j2只支持xml和json两种格式的配置，所以配置log4j.properties是没有作用的。<br>og4j的2.x版本在默认情况下，系统选择configuration文件的优先级如下：</p>
<p>1.classpath下名为log4j-test.json或者log4j-test.jsn文件</p>
<p>2.classpath下名为log4j2-test.xml</p>
<p>3.classpath下名为log4j.json或者log4j.jsn文件</p>
<p>4.classpath下名为log4j2.xml<br>所以我将<code>log4j.properties</code>修改为XML配置文件<code>log4j2.xml</code>，并将其放在类路径也就是src下面，问题解决！<br><code>log4j2.xml</code>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status&#x3D;&quot;WARN&quot;&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name&#x3D;&quot;Console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d&#123;YYYY-MM-dd HH:mm:ss&#125; [%t] %-5p %c&#123;1&#125;:%L - %msg%n&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Console&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;RollingFile&quot; filename&#x3D;&quot;log&#x2F;test.log&quot;</span><br><span class="line">                     filepattern&#x3D;&quot;$&#123;logPath&#125;&#x2F;%d&#123;YYYYMMddHHmmss&#125;-fargo.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d&#123;YYYY-MM-dd HH:mm:ss&#125; [%t] %-5p %c&#123;1&#125;:%L - %msg%n&quot; &#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;20&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;Console&quot; &#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;RollingFile&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Root&gt;</span><br><span class="line">    &lt;&#x2F;Loggers&gt;</span><br><span class="line">&lt;&#x2F;Configuration&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>bug</category>
        <category>Log4j</category>
      </categories>
      <tags>
        <tag>Log4j</tag>
        <tag>日志</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Tomcat作为一个服务开机自启动</title>
    <url>/2020/01/26/%E5%AE%89%E8%A3%85Tomcat%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>1.以管理员权限启动<code>cmd</code>窗口，使用<code>cd</code>命令切换到<code>tomcat</code>安装目录下的<code>bin</code>目录中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;例如</span><br><span class="line">cd C:\Program Files\Tomcat\apache-tomcat-8.5.47\bin</span><br></pre></td></tr></table></figure>
<p>2.使用<code>bin</code>目录下面的<code>service.bat</code>批处理文件来安装<code>tomcat</code>服务，命令为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service.bat install 服务名</span><br><span class="line">&#x2F;&#x2F;例如:</span><br><span class="line">service.bat install Tomcat8.5.7</span><br></pre></td></tr></table></figure>
<p>3.将此项服务设置为自启动，每次我们开机后，Tomcat就自动启动了，这样就可以在浏览器中通过项目地址访问项目了。<br>步骤为：<br><code>打开任务管理器</code>–&gt;<code>打开服务</code> —&gt;<code>找到我们安装的Tomcat服务</code> –&gt;<code>点击属性</code>  –&gt;<code>修改启动项为自动</code></p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>小知识点</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax回调函数判断字符串相等的一个巨坑</title>
    <url>/2020/01/21/ajax%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%A8%E5%9D%91/</url>
    <content><![CDATA[<h2 id="ajax回调函数中判断响应数据与字符串明明相等却显示不相等"><a href="#ajax回调函数中判断响应数据与字符串明明相等却显示不相等" class="headerlink" title="ajax回调函数中判断响应数据与字符串明明相等却显示不相等"></a>ajax回调函数中判断响应数据与字符串明明相等却显示不相等</h2><p>原先的判断代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#username&quot;).blur(function () &#123;</span><br><span class="line">        $.get(&quot;&#x2F;judgeServlet&quot;,&#123;username:$(&quot;#username&quot;).val()&#125;,function (result) &#123;</span><br><span class="line">            if(result&#x3D;&#x3D;&#x3D;&quot;unavailable&quot;)&#123; &#x2F;&#x2F;明明相等却显示不相等，无法继续执行方法体中方法</span><br><span class="line">                alert(&quot;用户名不可用&quot;);</span><br><span class="line">                $(&quot;#usernameAvailable&quot;).html(&quot;该用户名已注册&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>这里使用<code>===</code>判断符直接将后端响应回来的数据<code>result</code>与字符串<code>&quot;unavailable&quot;</code>进行判断，明明相等却显示不相等，真是日了狗了，气死宝宝了<br>执行代码<code>alert(result===&quot;unavailable&quot;)</code>后浏览器弹窗显示<code>false</code>。艹！</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>看起来明明一样的字符串为什么判断相等时就不相等呢？？？？经过查找资料知道：<br>虽然两个字符串肉眼看上去没有区别，但是用<code>setCharacterEncoding(&quot;UTF-8&quot;)</code> 处理后可能不一样（这里我暂时也不太确定哪里出的问题，网上别人是这样说的）(我处理后发现有个字符串前面有 %EF%BB%BF，另一个则没有 )</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在判断前先调用<code>trim()</code>方法去掉返回的字符串首尾空格,修改后的<code>if</code>判断体中的代码是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result.trim()&#x3D;&#x3D;&#x3D;&quot;unavailable&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>坑</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson的一些坑</title>
    <url>/2020/01/20/Fastjson%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    <content><![CDATA[<h2 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h2><p> 开发环境：<code>Tomcat</code> ， <code>IDEA</code> ， <code>Fastjson</code>对应的jar包版本的是<code>1.2.62</code><br>在<code>servlet</code>中使用<code>Fastjson</code>处理json数据时，浏览器显示以下错误信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON</span><br></pre></td></tr></table></figure>
<p>我之前已经在项目中已经导入了<code>Fastjson</code>的Jar包，运行项目却报了这个错，真是日了狗了</p>
<h2 id="产生bug原因"><a href="#产生bug原因" class="headerlink" title="产生bug原因"></a>产生bug原因</h2><p>该项目已经部署过，使用jason所用的包是后面加的，我在<code>IDEA</code>里面配置了，但是 <code>IDEA</code>不会自动把这些包重新部署到<code>tomcat</code>中去，所以，当网站运行起来后，就报找不到类的错了。</p>
<h2 id="处理办法"><a href="#处理办法" class="headerlink" title="处理办法"></a>处理办法</h2><p>把<code>Fastjson</code>对应的jar包部署到<code>tomcat</code>中去，即把相应的jar包复制到<code>tcomcat</code>目录下的<code>lib</code>目录下，即可。</p>
]]></content>
      <categories>
        <category>Fastjson</category>
        <category>json</category>
      </categories>
      <tags>
        <tag>Fastjson</tag>
        <tag>bug</tag>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson的使用</title>
    <url>/2020/01/20/Fastjson%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Fastjosn常用的方法"><a href="#Fastjosn常用的方法" class="headerlink" title="Fastjosn常用的方法"></a>Fastjosn常用的方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static final Object parse(String text); 　　&#x2F;&#x2F; 把JSON文本parse为JSONObject或者JSONArray </span><br><span class="line"></span><br><span class="line"> public static final JSONObject parseObject(String text)；　　 &#x2F;&#x2F; 把JSON文本parse成JSONObject </span><br><span class="line"></span><br><span class="line"> public static final T parseObject(String text, Class clazz); 　　&#x2F;&#x2F; 把JSON文本parse为JavaBean </span><br><span class="line"></span><br><span class="line"> public static final JSONArray parseArray(String text); 　　&#x2F;&#x2F; 把JSON文本parse成JSONArray </span><br><span class="line"></span><br><span class="line"> public static final List parseArray(String text, Class clazz); 　　&#x2F;&#x2F;把JSON文本parse成JavaBean集合 </span><br><span class="line"></span><br><span class="line"> public static final String toJSONString(Object object); 　　&#x2F;&#x2F; 将JavaBean序列化为JSON文本 </span><br><span class="line"></span><br><span class="line"> public static final String toJSONString(Object object, boolean prettyFormat); 　　&#x2F;&#x2F; 将JavaBean序列化为带格式的JSON文本 </span><br><span class="line"></span><br><span class="line"> public static final Object toJSON(Object javaObject); 　　&#x2F;&#x2F;将JavaBean转换为JSONObject或者JSONArray。</span><br></pre></td></tr></table></figure>
<h2 id="Fastjson字符串转List-lt-Map-lt-String-Object-gt-gt-或者List-的用法"><a href="#Fastjson字符串转List-lt-Map-lt-String-Object-gt-gt-或者List-的用法" class="headerlink" title="Fastjson字符串转List&lt;Map&lt;String,Object&gt;&gt;(), 或者List()的用法;"></a>Fastjson字符串转List&lt;Map&lt;String,Object&gt;&gt;(), 或者List<String>()的用法;</String></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list &#x3D; JSONObject.parseObject(respJson, new TypeReference&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="java对象转json字符串"><a href="#java对象转json字符串" class="headerlink" title="java对象转json字符串"></a>java对象转json字符串</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String jsonString &#x3D; JSON.toJSONString(orange);</span><br></pre></td></tr></table></figure>

<h2 id="json字符串转java对象"><a href="#json字符串转java对象" class="headerlink" title="json字符串转java对象"></a>json字符串转java对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fruit fruit &#x3D; JSON.parseObject(jsonString,Fruit.class);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>json</tag>
        <tag>Fastjosn</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax请求后端响应数据乱码问题解决</title>
    <url>/2020/01/19/ajax%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="response对象要设置编码格式"><a href="#response对象要设置编码格式" class="headerlink" title="response对象要设置编码格式"></a>response对象要设置编码格式</h2><p><code>response</code>对象要设置<code>contentType</code>和<code>characterEncoding</code>为<code>UTF-8</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line">response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="输出流的问题"><a href="#输出流的问题" class="headerlink" title="输出流的问题"></a>输出流的问题</h2><p>如果给前端响应数据使用的是通过<code>response</code>对象得到的输出流对象，这一步一定要在<code>response</code>设置编码格式为<code>UTF-8</code>之后！！！（血泪教训）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line">.....</span><br><span class="line">PrintWriter writer &#x3D; response.getWriter();&#x2F;&#x2F;这一步一定要在response设置编码格式为UTF-8之后</span><br><span class="line">writer.println(&quot;收到请求&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>乱码</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>令牌机制（token）防止表单重复提交</title>
    <url>/2020/01/16/%E4%BB%A4%E7%89%8C%E6%9C%BA%E5%88%B6%EF%BC%88token%EF%BC%89%E9%98%B2%E6%AD%A2%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h2 id="令牌机制"><a href="#令牌机制" class="headerlink" title="令牌机制"></a>令牌机制</h2><p><code>token</code>即标志、记号的意思，在IT领域也叫作<code>令牌</code>。其实说的更通俗点可以叫暗号，在一些数据传输之前，要先进行暗号的核对，不同的暗号被授权不同的数据操作。</p>
<h2 id="造成表单重复提交的原因"><a href="#造成表单重复提交的原因" class="headerlink" title="造成表单重复提交的原因"></a>造成表单重复提交的原因</h2><p>1、由于服务器缓存慢或网络延迟的原因，重复点击提交按钮<br>2、已经提交成功，刷新界面（forward）<br>3、已经提交成功，通过回退再次点击提交按钮</p>
<h2 id="使用令牌机制解决表单的重复提交问题"><a href="#使用令牌机制解决表单的重复提交问题" class="headerlink" title="使用令牌机制解决表单的重复提交问题"></a>使用令牌机制解决表单的重复提交问题</h2><p><strong>1.、在客户端界面生成令牌</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">&#x2F;&#x2F;生成一个不重复的令牌</span><br><span class="line">String uuid&#x3D;UUID.randomUUID.toString();</span><br><span class="line">session.setAttribute(&quot;token&quot;,uuid);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2、 在表单提交时附加上令牌</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;demoServlet&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;token&quot; value&#x3D;&quot;&lt;%&#x3D;uuid&gt;&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交表单&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p><strong>3、在服务器端验证令牌</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void demoServlet()&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.从session中取出令牌</span><br><span class="line">String token&#x3D;session.getAttribute(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.从页面提交的数据中取出令牌</span><br><span class="line">String pageToken&#x3D;request.getParameter(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.移除session中的令牌</span><br><span class="line">session.removeAttribute(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.比较两个令牌是否相同？</span><br><span class="line">&#x2F;&#x2F;4.1当令牌相等时（第一次提交后两个令牌肯定是一样的）</span><br><span class="line">if(token.equals(&quot;pageToken&quot;))&#123;</span><br><span class="line">    执行正常提交数据后的处理操作;</span><br><span class="line">    ...</span><br><span class="line">&#125;else    &#x2F;&#x2F;4.2当令牌不相等时</span><br><span class="line">    提示用户不要重复提交表单;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>令牌</category>
      </categories>
      <tags>
        <tag>令牌</tag>
        <tag>小知识点</tag>
        <tag>表单提交</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring容器bean的三种装配机制</title>
    <url>/2020/01/11/Spring%E5%AE%B9%E5%99%A8bean%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A3%85%E9%85%8D%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一-配置bean的一些知识"><a href="#一-配置bean的一些知识" class="headerlink" title="一. 配置bean的一些知识"></a>一. 配置bean的一些知识</h2><ol>
<li>Spring容器负责创建应用程序中的bean并通过DI来协调这些对象的关系，作为开发人员，首先要先告诉Spring要创建哪些bean并且如何将其装配在一起，然后才能从容器中使用这些bean。</li>
<li>总计有三种配置方式，并且这三种方式是可以互相搭配的，即你可以选择使用XML来装配一些bean，使用Spring基于java（JavaConfig）的方式装配一些bean，然后剩余的bean让Spring去自动发现。</li>
<li>建议是尽可能使用自动配置的机制，显式配置越少越好。必须要显式配置的时候优先选择类型安全并且比XML更加强大的JavaConfig。最后只有当你想要使用便利的XML命名空间的时候，并且在JavaConfig中没有同样的实现时，才应该使用XML配置。</li>
</ol>
<h2 id="二-三种bean装配机制"><a href="#二-三种bean装配机制" class="headerlink" title="二. 三种bean装配机制"></a>二. 三种bean装配机制</h2><h3 id="方式1-在XML中进行显式配置"><a href="#方式1-在XML中进行显式配置" class="headerlink" title="方式1 在XML中进行显式配置"></a>方式1 在XML中进行显式配置</h3><p>1</p>
<h3 id="方式2-在java中进行显式配置"><a href="#方式2-在java中进行显式配置" class="headerlink" title="方式2 在java中进行显式配置"></a>方式2 在java中进行显式配置</h3><p>2</p>
<h3 id="方式3-隐式的bean发现机制和自动装配"><a href="#方式3-隐式的bean发现机制和自动装配" class="headerlink" title="方式3 隐式的bean发现机制和自动装配"></a>方式3 隐式的bean发现机制和自动装配</h3><p>Spring从两个角度来实现自动化装配 ：</p>
<ol>
<li>组件扫描：Spring会自动发现应用上下文所创建的bean（默认是不开启的）。</li>
<li>自动装配：Spring会自动满足bean之间的依赖。</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>Spring</tag>
        <tag>bean</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题增加页面出现的bug</title>
    <url>/2020/01/09/hexo%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2%E5%87%BA%E7%8E%B0%E7%9A%84bug/</url>
    <content><![CDATA[<p><strong>bug</strong>：在增加标签和分类页面后，点击标签或者分类图标时页面显示<em>Cannot GET /tags/%20/</em><br><strong>原因</strong>：不小心在修改主题配置文件 <strong><em>_config.yml</em></strong> 时，在 <strong>/</strong> 和 <strong>||</strong> 之间加多了空格,去掉就可以了。</p>
<p><strong>原先错误代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br></pre></td></tr></table></figure>
<p><strong>修改后的正确代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇Blog</title>
    <url>/2020/01/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87Blog/</url>
    <content><![CDATA[<p>  哈哈哈终于成功搭建好了hexo博客，这是我的第一篇个人博客！<br>  第一次写博客，好激动鸭ヽ(￣▽￣)ﾉ<br><code>date: 2020-01-06 22:44:44</code></p>
]]></content>
      <tags>
        <tag>第一次</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
